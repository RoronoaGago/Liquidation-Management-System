# Generated by Django 5.2 on 2025-09-29 23:46

import api.json_utils
import api.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ListOfPriority',
            fields=[
                ('LOPID', models.AutoField(primary_key=True, serialize=False)),
                ('expenseTitle', models.CharField(max_length=255)),
                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('training', 'Training Expenses'), ('scholarship', 'Scholarship Grants/Expenses'), ('supplies', 'Office Supplies & Materials Expenses'), ('utilities', 'Utilities Expenses'), ('communication', 'Communication Expenses'), ('awards', 'Awards/Rewards/Prizes Expenses'), ('survey', 'Survey, Research, Exploration and Development Expenses'), ('confidential', 'Confidential & Intelligence Expenses'), ('extraordinary', 'Extraordinary and Miscellaneous Expenses'), ('professional', 'Professional Service Expenses'), ('services', 'General Services'), ('maintenance', 'Repairs and Maintenance Expenses'), ('financial_assistance', 'Financial Assistance/Subsidy Expenses'), ('taxes', 'Taxes, Duties and Licenses Expenses'), ('labor', 'Labor and Wages Expenses'), ('other_maintenance', 'Other Maintenance and Operating Expenses'), ('financial', 'Financial Expenses'), ('non_cash', 'Non-cash Expenses'), ('losses', 'Losses')], default='other_maintenance', max_length=30)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Requirement',
            fields=[
                ('requirementID', models.AutoField(primary_key=True, serialize=False)),
                ('requirementTitle', models.CharField(max_length=255)),
                ('is_required', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('schoolId', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('schoolName', models.CharField(max_length=255)),
                ('municipality', models.CharField(max_length=100)),
                ('legislativeDistrict', models.CharField(choices=[('1st District', '1st District'), ('2nd District', '2nd District')], max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('last_liquidated_month', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('last_liquidated_year', models.PositiveSmallIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SchoolDistrict',
            fields=[
                ('districtId', models.AutoField(primary_key=True, serialize=False)),
                ('districtName', models.CharField(max_length=255)),
                ('municipality', models.CharField(max_length=100)),
                ('legislativeDistrict', models.CharField(choices=[('1st District', '1st District'), ('2nd District', '2nd District')], max_length=100)),
                ('logo', models.ImageField(blank=True, help_text='District logo image', null=True, upload_to='district_logos/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png', 'svg'])])),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False)),
                ('password_change_required', models.BooleanField(default=True)),
                ('email', models.EmailField(help_text='Required. Must be a valid email address.', max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('school_head', 'School Head'), ('school_admin', 'School Administrative Assistant'), ('district_admin', 'District Administrative Assistant'), ('superintendent', 'Division Superintendent'), ('liquidator', 'Liquidator'), ('accountant', 'Division Accountant')], default='school_admin', max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('otp_code', models.CharField(blank=True, max_length=6, null=True)),
                ('otp_generated_at', models.DateTimeField(blank=True, null=True)),
                ('e_signature', models.ImageField(blank=True, help_text='E-signature for School Head, Division Superintendent, and Division Accountant', null=True, upload_to='e_signatures/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png'])])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='api.school')),
                ('school_district', models.ForeignKey(blank=True, help_text='District assignment (only for district administrative assistants)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='district_users', to='api.schooldistrict')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('format', models.CharField(choices=[('json', 'JSON'), ('sql', 'SQL'), ('csv', 'CSV')], default='json', max_length=20)),
                ('include_media', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('file_size', models.BigIntegerField(blank=True, help_text='Size in bytes of the main archive', null=True)),
                ('message', models.TextField(blank=True, null=True)),
                ('initiated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='backups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalRequestManagement',
            fields=[
                ('request_id', models.CharField(db_index=True, default=api.models.generate_request_id, editable=False, max_length=10)),
                ('request_monthyear', models.CharField(blank=True, max_length=7, null=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('rejected', 'Rejected'), ('pending', 'Pending'), ('downloaded', 'Downloaded'), ('unliquidated', 'Unliquidated'), ('liquidated', 'Liquidated'), ('advanced', 'Advanced')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('last_reminder_sent', models.DateField(blank=True, null=True)),
                ('demand_letter_sent', models.BooleanField(default=False)),
                ('demand_letter_date', models.DateField(blank=True, null=True)),
                ('date_approved', models.DateField(blank=True, null=True)),
                ('downloaded_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_comment', models.TextField(blank=True, null=True)),
                ('rejection_date', models.DateField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical request management',
                'verbose_name_plural': 'historical request managements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_title', models.CharField(max_length=255)),
                ('details', models.TextField(blank=True, null=True)),
                ('notification_date', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_received', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notifications_sent', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RequestManagement',
            fields=[
                ('request_id', models.CharField(default=api.models.generate_request_id, editable=False, max_length=10, primary_key=True, serialize=False, unique=True)),
                ('request_monthyear', models.CharField(blank=True, max_length=7, null=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('rejected', 'Rejected'), ('pending', 'Pending'), ('downloaded', 'Downloaded'), ('unliquidated', 'Unliquidated'), ('liquidated', 'Liquidated'), ('advanced', 'Advanced')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_reminder_sent', models.DateField(blank=True, null=True)),
                ('demand_letter_sent', models.BooleanField(default=False)),
                ('demand_letter_date', models.DateField(blank=True, null=True)),
                ('date_approved', models.DateField(blank=True, null=True)),
                ('downloaded_at', models.DateTimeField(blank=True, null=True)),
                ('rejection_comment', models.TextField(blank=True, null=True)),
                ('rejection_date', models.DateField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LiquidationManagement',
            fields=[
                ('LiquidationID', models.CharField(default=api.models.generate_liquidation_id, editable=False, max_length=10, primary_key=True, serialize=False, unique=True)),
                ('refund', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('rejection_comment', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review_district', 'Under Review (District)'), ('under_review_liquidator', 'Under Review (Liquidator)'), ('under_review_division', 'Under Review (Division)'), ('resubmit', 'Needs Revision'), ('approved_district', 'Approved by District'), ('approved_liquidator', 'Approved by Liquidator'), ('liquidated', 'Liquidated')], default='draft', max_length=30)),
                ('reviewed_at_district', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at_liquidator', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at_division', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at_accountant', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('date_submitted', models.DateTimeField(blank=True, null=True)),
                ('date_districtApproved', models.DateField(blank=True, null=True)),
                ('date_liquidatorApproved', models.DateField(blank=True, null=True)),
                ('date_liquidated', models.DateTimeField(blank=True, null=True)),
                ('remaining_days', models.IntegerField(blank=True, null=True)),
                ('reviewed_by_accountant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accountant_reviewed_liquidations', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='district_reviewed_liquidations', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_division', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='division_reviewed_liquidations', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_liquidator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='liquidator_reviewed_liquidations', to=settings.AUTH_USER_MODEL)),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='liquidation', to='api.requestmanagement')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalRequestPriority',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('priority', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.listofpriority')),
                ('request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.requestmanagement')),
            ],
            options={
                'verbose_name': 'historical request priority',
                'verbose_name_plural': 'historical request prioritys',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalLiquidationManagement',
            fields=[
                ('LiquidationID', models.CharField(db_index=True, default=api.models.generate_liquidation_id, editable=False, max_length=10)),
                ('refund', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('rejection_comment', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review_district', 'Under Review (District)'), ('under_review_liquidator', 'Under Review (Liquidator)'), ('under_review_division', 'Under Review (Division)'), ('resubmit', 'Needs Revision'), ('approved_district', 'Approved by District'), ('approved_liquidator', 'Approved by Liquidator'), ('liquidated', 'Liquidated')], default='draft', max_length=30)),
                ('reviewed_at_district', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at_liquidator', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at_division', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at_accountant', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('date_submitted', models.DateTimeField(blank=True, null=True)),
                ('date_districtApproved', models.DateField(blank=True, null=True)),
                ('date_liquidatorApproved', models.DateField(blank=True, null=True)),
                ('date_liquidated', models.DateTimeField(blank=True, null=True)),
                ('remaining_days', models.IntegerField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_accountant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_district', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_division', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by_liquidator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.requestmanagement')),
            ],
            options={
                'verbose_name': 'historical liquidation management',
                'verbose_name_plural': 'historical liquidation managements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='GeneratedPDF',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('pdf_file', models.FileField(blank=True, help_text='Stored PDF file for audit trail', null=True, upload_to='generated_pdfs/%Y/%m/%d/')),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('generation_method', models.CharField(choices=[('server_side', 'Server-side with signatures'), ('client_side', 'Client-side (legacy)')], default='server_side', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who generated the PDF', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string for audit trail', null=True)),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_pdfs', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_pdfs', to='api.requestmanagement')),
            ],
            options={
                'verbose_name': 'Generated PDF',
                'verbose_name_plural': 'Generated PDFs',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='RequestPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('priority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.listofpriority')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.requestmanagement')),
            ],
            options={
                'unique_together': {('request', 'priority')},
            },
        ),
        migrations.AddField(
            model_name='requestmanagement',
            name='priorities',
            field=models.ManyToManyField(related_name='requests', through='api.RequestPriority', to='api.listofpriority'),
        ),
        migrations.CreateModel(
            name='PriorityRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='priority_reqs', to='api.listofpriority')),
                ('requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='priority_reqs', to='api.requirement')),
            ],
            options={
                'unique_together': {('priority', 'requirement')},
            },
        ),
        migrations.AddField(
            model_name='listofpriority',
            name='requirements',
            field=models.ManyToManyField(related_name='priority_requirement', through='api.PriorityRequirement', to='api.requirement'),
        ),
        migrations.CreateModel(
            name='LiquidationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document', models.FileField(upload_to='liquidation_documents/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('resubmitted', 'Resubmitted')], default='pending', max_length=20)),
                ('reviewer_comment', models.TextField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=None, null=True)),
                ('is_resubmission', models.BooleanField(default=False)),
                ('resubmission_count', models.PositiveIntegerField(default=0)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
                ('liquidation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.liquidationmanagement')),
                ('request_priority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.requestpriority')),
                ('requirement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.requirement')),
            ],
            options={
                'unique_together': {('liquidation', 'request_priority', 'requirement')},
            },
        ),
        migrations.CreateModel(
            name='HistoricalBudgetAllocation',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('year', models.PositiveIntegerField(help_text='Year for this budget allocation (e.g., 2024)')),
                ('yearly_budget', models.DecimalField(decimal_places=2, help_text='Total yearly budget allocated to the school', max_digits=15)),
                ('monthly_budget', models.DecimalField(decimal_places=2, help_text='Monthly budget (yearly_budget / 12), calculated automatically', max_digits=15)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('is_active', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='api.school')),
            ],
            options={
                'verbose_name': 'historical budget allocation',
                'verbose_name_plural': 'historical budget allocations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='school',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schools', to='api.schooldistrict'),
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('archive', 'Archive'), ('restore', 'Restore'), ('login', 'Login'), ('logout', 'Logout'), ('approve', 'Approve'), ('reject', 'Reject'), ('submit', 'Submit'), ('download', 'Download'), ('backup', 'Backup'), ('restore', 'Restore'), ('password_change', 'Password Change'), ('resubmit', 'Resubmit'), ('approve_district', 'Approve (District)'), ('approve_liquidator', 'Approve (Liquidator)'), ('approve_division', 'Approve (Division)'), ('liquidate', 'Liquidate'), ('batch_update', 'Batch Update')], max_length=20)),
                ('module', models.CharField(choices=[('user', 'User Management'), ('school', 'School Management'), ('request', 'Request Management'), ('liquidation', 'Liquidation Management'), ('priority', 'Priority Management'), ('requirement', 'Requirement Management'), ('district', 'District Management'), ('system', 'System Operations'), ('auth', 'Authentication')], max_length=20)),
                ('object_id', models.CharField(blank=True, max_length=100, null=True)),
                ('object_type', models.CharField(blank=True, max_length=100, null=True)),
                ('object_name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('old_values', models.JSONField(blank=True, encoder=api.json_utils.DecimalJSONEncoder, null=True)),
                ('new_values', models.JSONField(blank=True, encoder=api.json_utils.DecimalJSONEncoder, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='api_auditlo_user_id_8f69e8_idx'), models.Index(fields=['module', 'action'], name='api_auditlo_module_57db4a_idx'), models.Index(fields=['object_type', 'object_id'], name='api_auditlo_object__e7bdeb_idx')],
            },
        ),
        migrations.CreateModel(
            name='DocumentVersion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('document_file', models.FileField(upload_to='liquidation_documents/versions/%Y/%m/%d/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'jpg', 'jpeg', 'png'])])),
                ('version_number', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('rejected', 'Rejected'), ('superseded', 'Superseded')], default='rejected', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('reviewer_comment', models.TextField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_document_versions', to=settings.AUTH_USER_MODEL)),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_document_versions', to=settings.AUTH_USER_MODEL)),
                ('original_document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='api.liquidationdocument')),
            ],
            options={
                'ordering': ['-version_number'],
                'indexes': [models.Index(fields=['original_document', 'version_number'], name='api_documen_origina_051b0d_idx')],
            },
        ),
        migrations.CreateModel(
            name='LiquidationPriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('liquidation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='liquidation_priorities', to='api.liquidationmanagement')),
                ('priority', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.listofpriority')),
            ],
            options={
                'unique_together': {('liquidation', 'priority')},
            },
        ),
        migrations.CreateModel(
            name='BudgetAllocation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('year', models.PositiveIntegerField(help_text='Year for this budget allocation (e.g., 2024)')),
                ('yearly_budget', models.DecimalField(decimal_places=2, help_text='Total yearly budget allocated to the school', max_digits=15)),
                ('monthly_budget', models.DecimalField(decimal_places=2, help_text='Monthly budget (yearly_budget / 12), calculated automatically', max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_budget_allocations', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='budget_allocations', to='api.school')),
            ],
            options={
                'ordering': ['-year', 'school__schoolName'],
                'unique_together': {('school', 'year')},
            },
        ),
    ]
